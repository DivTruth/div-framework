/******************************************************************
Site Name: Div Framework
Stylesheet: Mixins & Constants Stylesheet
******************************************************************/

/*********************
COLORS
*********************/
$white: 			   #fff;
$black:				   #000;
$alert-yellow:   #ebe16f;
$alert-red:      #fbe3e4;
$alert-green:    #e6efc2;
$alert-blue:     #d5edf8;

/* Base Colors */
$white:   #fff;
$black:   #000;
$grey:    #808080;
$bgr:     #fff; /* Background */


/*********************
TYPOGRAPHY
*********************/
$sans-serif:        Helvetica, Arial, sans-serif;
$serif:           'Times New Roman', Georgia, serif;

/*********************
 * RESPONSIVE IMAGES
 * @include responsive();
 *********************/
@mixin responsive() {
	width: 100%;
	height: auto;
	overflow: hidden;
}

/*********************
RESPOND TO
@include respondTo($media);
NOTES:
	- $media ($smartphone, $tabletPortrait, $tabletLandscape, $desktop, $largeScreen)
*********************/
$smartphone: 480px;
$tabletPortrait: 767px;
$tabletLandscape: 1024px;
$desktop: 1174px;
$largeScreen: 1400px;
@mixin respondTo($media) {
  @if $media == smartphone {
    @media (max-width: $smartphone) { @content; }
  }
  @else if $media == tablet {
    @media (min-width: $tabletPortrait) and (max-width: $tabletLandscape) { @content; }
  }
  @else if $media == smallScreen {
    @media (max-width: $desktop) { @content; }
  }
  @else if $media == desktop {
    @media (min-width: $desktop) { @content; }
  }
}

/*********************
BORDER RADIUS
@include border-radius($radius);
NOTES:
	- Simple border radius mixin to cover all browser implementations
*********************/
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
       -o-border-radius: $radius;
          border-radius: $radius;
}

/*********************
VERTICAL ALIGN
@include vertical-align();
NOTES:
  - Simple border radius mixin to cover all browser implementations
*********************/
@mixin vertical-align() {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}
/*********************
OPACITY
@include opacity(1);
NOTES:
  - Browser compatible opacity adjustment
*********************/
@mixin opacity($opacity) {
  filter: alpha(opacity=#{$opacity*100}); // IE 5-9+ 
  opacity: $opacity; 
}

/*********************
TRANSITION
@include transition(all 0.2s ease-in-out);
NOTES:
	- Rewritten to be cleaner and easier to use, but you will
	 need to be using Sass 3.2+ for these to work.
	- Thanks to @anthonyshort for the inspiration on these.
*********************/
@mixin transition($transition...) {
	// defining prefixes so we can use them in mixins below
	$prefixes:      ("-webkit", "-ms", "-o",  "");
  @each $prefix in $prefixes {
    #{$prefix}-transition: $transition;
  }

  transition: $transition;
}

/*********************
CSS3 GRADIENTS
@include css-gradient(#dfdfdf,#f8f8f8);
NOTES:
	-Be careful with these since they can really slow down your CSS. Don't overdue it.
	-added support for IE
*********************/
@mixin css-gradient($from, $to) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
    filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr='#{ie-hex-str($from)}', endColorstr='#{ie-hex-str($to)}');
}

/*********************
CSS3 RADIAL GRADIENTS
@include radial-gradient(#dfdfdf,#f8f8f8);
NOTES:
	-Be careful with these since they can really slow down your CSS. Don't overdue it.
	-added support for IE
*********************/
@mixin radial-gradient($from, $to) {
    background: -moz-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $from), color-stop(100%, $to));
    background: -webkit-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -o-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -ms-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: radial-gradient(center, circle cover, $from 0%, $to 100%);
    background-color: $from;
}

/*********************
CSS3 BOX SHADOW
@include box-shadow(0, 0, 10px, 0, #444444, "");
*********************/
@mixin box-shadow($top, $left, $blur, $color, $inset:"") {
      -webkit-box-shadow:$top $left $blur $color #{$inset};
      -moz-box-shadow:$top $left $blur $color #{$inset};
      box-shadow:$top $left $blur $color #{$inset};
      -o-box-shadow:$top $left $blur $color #{$inset};
}

/*********************
BOX SIZING
@include box-sizing(border-box);
NOTE: 
	- Value of "padding-box" is only supported in Gecko. So probably best not to use it.
*********************/
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:    $type;
	-ms-box-sizing:     $type;
	box-sizing:         $type;
}

/*********************
TRIANGLE
@include triangle($direction, $size: 6px, $color: #222)
NOTES:
	- $direction: up, down, left, right
	- Within a pseudo element and add positioning properties (ie. top, left)
*********************/
@mixin triangle($direction, $size: 6px, $color: #222){
  content: '';
  display: block;
  position: absolute;
  height: 0; width: 0;
  @if ($direction == 'up'){
    border-bottom: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'down'){
    border-top: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'left'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == 'right'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-left: $size solid $color;
  }
}

/*********************
CURRENCY
	<PARENT class="USD">    
	    <span class="price">45</span>
	</PARENT>

	.price {
	    @extend %currency;
	}
*********************/
%currency {
  position: relative;
  &:before {
    content: '$';
    position: relative;
    left: 0;
  }
}
.USD %currency:before { content: '$'; }
.EUR %currency:before { content: '\20AC'; } // must escape the html entities for each currency symbol
.ILS %currency:before { content: '\20AA'; }
.GBP %currency:before { content: '\00A3'; }

/*********************
VERTICAL ALIGN (GHOST)
@include verticalAlign()
NOTES:
	- This is a slightly modified version of a CSS-Tricks method
	 for vertically centering elements with a dynamic size. 
	 Works beautifully and doesn’t require an extra, non-semantic HTML element.
*********************/
@mixin verticalAlign(){
  &:before {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%; width: .1px;
  }
}

/*********************
TRUNCATE TEXT
@include truncateText()
NOTES:
	- This is a slightly modified version of a CSS-Tricks method
	 for vertically centering elements with a dynamic size. 
	 Works beautifully and doesn’t require an extra, non-semantic HTML element.
*********************/
@mixin truncateText($overflow: ellipsis){
  overflow: hidden;
  white-space: nowrap;
  text-overflow: $overflow; // values are: clip, ellipsis, or a string
}

/*********************
ANIMATION
@include animation()
NOTES:
	- Compass CSS3 mixins don’t yet handle vendor prefixes for CSS animations, 
	so this is a very simple mixin to simulate that functionality.
*********************/
@mixin animation($name, $duration: 1000ms, $iterations: infinite, $timing-function: ease, $delay: 0ms) {
  // There is a FF bug that requires all time values to have units, even 0 !!!!!!
  -webkit-animation: $name $duration $iterations $timing-function $delay;
  -moz-animation: $name $duration $iterations $timing-function $delay;
  -o-animation: $name $duration $iterations $timing-function $delay;
  animation: $name $duration $iterations $timing-function $delay;
}
